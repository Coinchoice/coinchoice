/// <reference types="chrome" />
import { getScope } from './scope';
export { getScope, getScope as useScope };
export declare const __defaultScopeName = "@extend-chrome/messages__root";
export declare const messages: {
    send: {
        <T, R>(data: T, options: import("./types").AsyncSendOptions): Promise<R>;
        <T_1>(data: T_1, options: import("./types").SendOptions): Promise<void>;
        <T_2>(data: T_2): Promise<void>;
    };
    on: {
        <T_3, R_1>(callback: (data: T_3, sender: chrome.runtime.MessageSender, respond: (data: R_1) => void) => void): void;
        <T_4>(callback: (data: T_4, sender: chrome.runtime.MessageSender) => void): void;
    };
    off: (fn: import("./types").MessageListener | import("./types").AsyncMessageListener) => void;
    stream: import("rxjs").Observable<[any, chrome.runtime.MessageSender] | [any, chrome.runtime.MessageSender, (data: any) => void]>;
    getMessage: {
        <T_5, R_2>(greeting: string, options: {
            async: true;
        }): [((data: T_5, options?: import("./types").SendOptions | undefined) => Promise<R_2>) & {
            toTab: (options?: import("./types").SendOptions | undefined) => Promise<R_2>;
        }, import("rxjs").Observable<[T_5, chrome.runtime.MessageSender, (response: R_2) => void]>, (predicate?: ((x: T_5) => boolean) | undefined) => Promise<T_5>];
        <T_6>(greeting: string): [((data: T_6, options?: import("./types").SendOptions | undefined) => Promise<void>) & {
            toTab: (options?: import("./types").SendOptions | undefined) => Promise<void>;
        }, import("rxjs").Observable<[T_6, chrome.runtime.MessageSender]>, (predicate?: ((x: T_6) => boolean) | undefined) => Promise<T_6>];
    };
};
export declare const getMessage: {
    <T, R>(greeting: string, options: {
        async: true;
    }): [((data: T, options?: import("./types").SendOptions | undefined) => Promise<R>) & {
        toTab: (options?: import("./types").SendOptions | undefined) => Promise<R>;
    }, import("rxjs").Observable<[T, chrome.runtime.MessageSender, (response: R) => void]>, (predicate?: ((x: T) => boolean) | undefined) => Promise<T>];
    <T_1>(greeting: string): [((data: T_1, options?: import("./types").SendOptions | undefined) => Promise<void>) & {
        toTab: (options?: import("./types").SendOptions | undefined) => Promise<void>;
    }, import("rxjs").Observable<[T_1, chrome.runtime.MessageSender]>, (predicate?: ((x: T_1) => boolean) | undefined) => Promise<T_1>];
};
