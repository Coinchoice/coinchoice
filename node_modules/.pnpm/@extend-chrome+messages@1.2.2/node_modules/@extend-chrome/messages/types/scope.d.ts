/// <reference types="chrome" />
import { Observable } from 'rxjs';
import { AsyncMessageListener, AsyncSendOptions, MessageListener, Sender, SendOptions } from './types';
/**
 * Get a messages scope by name.
 */
export declare function getScope(scope: string): {
    send: {
        <T, R>(data: T, options: AsyncSendOptions): Promise<R>;
        <T_1>(data: T_1, options: SendOptions): Promise<void>;
        <T_2>(data: T_2): Promise<void>;
    };
    on: {
        <T_3, R_1>(callback: (data: T_3, sender: Sender, respond: (data: R_1) => void) => void): void;
        <T_4>(callback: (data: T_4, sender: Sender) => void): void;
    };
    off: (fn: MessageListener | AsyncMessageListener) => void;
    stream: Observable<[any, chrome.runtime.MessageSender] | [any, chrome.runtime.MessageSender, (data: any) => void]>;
    getMessage: {
        <T_5, R_2>(greeting: string, options: {
            async: true;
        }): [((data: T_5, options?: SendOptions | undefined) => Promise<R_2>) & {
            toTab: (options?: SendOptions | undefined) => Promise<R_2>;
        }, Observable<[T_5, chrome.runtime.MessageSender, (response: R_2) => void]>, (predicate?: ((x: T_5) => boolean) | undefined) => Promise<T_5>];
        <T_6>(greeting: string): [((data: T_6, options?: SendOptions | undefined) => Promise<void>) & {
            toTab: (options?: SendOptions | undefined) => Promise<void>;
        }, Observable<[T_6, chrome.runtime.MessageSender]>, (predicate?: ((x: T_6) => boolean) | undefined) => Promise<T_6>];
    };
};
